#!/bin/bash

# List of Pokémon names
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Pokémon API URL
api_url="https://pokeapi.co/api/v2/pokemon/"

# Function to fetch Pokémon data
fetch_pokemon_data() {
    local pokemon_name="$1"
    local formatted_name=$(echo "$pokemon_name" | awk '{print tolower($0)}')

    # Send a request and save response to the respective JSON file
    response=$(curl -s -w "%{http_code}" -o "${formatted_name}.json" "${api_url}${formatted_name}")

    # Check for successful response
    if [[ "$response" -eq 200 ]]; then
        echo "Data for $pokemon_name saved to ${formatted_name}.json"
    else
        echo "Failed to fetch data for $pokemon_name. HTTP Status: $response" >> errors.txt
        rm -f "${formatted_name}.json"
    fi
}

# Array to track background processes
pids=()

# Loop over the Pokémon list and process each in parallel
for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon_data "$pokemon" &  # Run the fetch in the background
    pids+=($!)  # Save the background process ID
    sleep 1  # Optional delay to avoid rate-limiting
done

# Wait for all background jobs to complete and handle errors
for pid in "${pids[@]}"; do
    wait $pid  # Wait for each process to complete
    if [[ $? -ne 0 ]]; then  # Check if the process failed
        echo "Process $pid failed. Killing process..." 
        kill $pid  # Kill the failed process
    fi
done

# List all background jobs that have been processed
jobs

# Final confirmation
echo "All requests completed."
